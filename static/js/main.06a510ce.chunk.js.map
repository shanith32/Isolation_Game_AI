{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","squareColor","onClick","value","Board","row","col","_this","this","squareCssType","squareValue","squares","src_Square","key","Math","random","board","i","j","push","renderSquare","createBoard","Component","Game","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Array","fill","map","p1IsNext","p1Location","p2Location","playerLocation","isAvailable","isNull","moves","length","_moves$i","slicedToArray","n","b","console","log","result","_moves$i2","calculateWinner","checkIfMoveLegal","setState","status","_this2","winner","concat","src_Board_0","handleClick","App","src_Game_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06a510ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Square.css\";\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className={props.squareColor} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./Square\";\r\nimport \"./Board.css\";\r\n\r\nclass Board extends Component {\r\n  renderSquare(row, col) {\r\n    let squareCssType = \"oddSquare\";\r\n    let squareValue = this.props.squares[row][col];\r\n\r\n    if (squareValue === \"@\") {\r\n      squareCssType = \"usedSquare\";\r\n      squareValue = null;\r\n    } else if (row % 2 === 0) {\r\n      if (col % 2 === 0) squareCssType = \"evenSquare\";\r\n    } else {\r\n      if (col % 2 !== 0) squareCssType = \"evenSquare\";\r\n    }\r\n\r\n    return (\r\n      <Square\r\n        key={Math.random()}\r\n        value={squareValue}\r\n        onClick={() => this.props.onClick(row, col)}\r\n        squareColor={squareCssType}\r\n      />\r\n    );\r\n  }\r\n\r\n  createBoard() {\r\n    let board = [];\r\n    for (let i = 0; i < 7; i++) {\r\n      let squares = [];\r\n      for (let j = 0; j < 7; j++) squares.push(this.renderSquare(i, j));\r\n\r\n      board.push(\r\n        <div key={i} className=\"board-row\">\r\n          {squares}\r\n        </div>\r\n      );\r\n    }\r\n    return board;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.createBoard()}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\nimport Board from \"./Board\";\r\nimport \"./Game.css\";\r\nimport { isNull } from \"util\";\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(7)\r\n        .fill(null)\r\n        .map(() => Array(7).fill(null)),\r\n      p1IsNext: true,\r\n      p1Location: { row: null, col: null },\r\n      p2Location: { row: null, col: null }\r\n    };\r\n  }\r\n\r\n  // Calculate the winner\r\n  calculateWinner() {\r\n    let playerLocation = this.state.p1Location;\r\n    let isAvailable = [0, 0];\r\n\r\n    if (\r\n      (isNull(this.state.p1Location.row) &&\r\n        isNull(this.state.p1Location.col)) ||\r\n      (isNull(this.state.p2Location.row) && isNull(this.state.p2Location.col))\r\n    )\r\n      return false;\r\n\r\n    for (let j = 0; j < 2; j++) {\r\n      const moves = [\r\n        [1, playerLocation.row + 2, playerLocation.col + 1],\r\n        [2, playerLocation.row + 2, playerLocation.col - 1],\r\n        [3, playerLocation.row - 2, playerLocation.col + 1],\r\n        [4, playerLocation.row - 2, playerLocation.col - 1],\r\n        [5, playerLocation.row + 1, playerLocation.col - 2],\r\n        [6, playerLocation.row - 1, playerLocation.col - 2],\r\n        [7, playerLocation.row + 1, playerLocation.col + 2],\r\n        [8, playerLocation.row - 1, playerLocation.col + 2]\r\n      ];\r\n\r\n      for (let i = 0; i < moves.length; i++) {\r\n        const [n, a, b] = moves[i];\r\n        if (a >= 0 && a < 7 && b >= 0 && b < 7) {\r\n          console.log(\"n => \", n, \" a: \", a, \" b: \", b);\r\n          if (isNull(this.state.squares[a][b])) isAvailable[j]++;\r\n        }\r\n      }\r\n\r\n      playerLocation = this.state.p2Location;\r\n    }\r\n\r\n    console.log(\"IsAvailable: \", isAvailable[0], \" \", isAvailable[1]);\r\n    let result = false;\r\n\r\n    if (!isAvailable[0]) result = \"üê¥\";\r\n    else if (!isAvailable[1]) result = \"ü¶Ñ\";\r\n\r\n    return result;\r\n  }\r\n\r\n  // Function to check if the move is a legal move\r\n  checkIfMoveLegal(row, col) {\r\n    const playerLocation = this.state.p1IsNext\r\n      ? this.state.p1Location\r\n      : this.state.p2Location;\r\n\r\n    if (isNull(playerLocation.row) && isNull(playerLocation.col)) return false;\r\n\r\n    const moves = [\r\n      [playerLocation.row + 2, playerLocation.col + 1],\r\n      [playerLocation.row + 2, playerLocation.col - 1],\r\n      [playerLocation.row - 2, playerLocation.col + 1],\r\n      [playerLocation.row - 2, playerLocation.col - 1],\r\n      [playerLocation.row + 1, playerLocation.col - 2],\r\n      [playerLocation.row - 1, playerLocation.col - 2],\r\n      [playerLocation.row + 1, playerLocation.col + 2],\r\n      [playerLocation.row - 1, playerLocation.col + 2]\r\n    ];\r\n\r\n    for (let i = 0; i < moves.length; i++) {\r\n      const [a, b] = moves[i];\r\n      if (row === a && col === b) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // Function to handle the click on a square\r\n  handleClick(row, col) {\r\n    const { squares } = this.state;\r\n    const { p1Location } = this.state;\r\n    const { p2Location } = this.state;\r\n\r\n    if (\r\n      this.calculateWinner() ||\r\n      squares[row][col] ||\r\n      this.checkIfMoveLegal(row, col)\r\n    )\r\n      return;\r\n\r\n    if (this.state.p1IsNext) {\r\n      squares[row][col] = \"ü¶Ñ\";\r\n      if (p1Location.row !== null && p1Location.col !== null)\r\n        squares[p1Location.row][p1Location.col] = \"@\";\r\n\r\n      this.setState({\r\n        squares: squares,\r\n        p1IsNext: !this.state.p1IsNext,\r\n        p1Location: { row: row, col: col }\r\n      });\r\n    } else {\r\n      squares[row][col] = \"üê¥\";\r\n      if (p2Location.row !== null && p2Location.col !== null)\r\n        squares[p2Location.row][p2Location.col] = \"@\";\r\n\r\n      this.setState({\r\n        squares: squares,\r\n        p1IsNext: !this.state.p1IsNext,\r\n        p2Location: { row: row, col: col }\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const winner = this.calculateWinner();\r\n\r\n    let status;\r\n    if (winner) status = `Winner ${winner}`;\r\n    else status = `${this.state.p1IsNext ? \"ü¶Ñ\" : \"üê¥\"}'s Turn`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-info\">\r\n          <div className=\"game-name\">The Isolation Game</div>\r\n          <div>{status}</div>\r\n        </div>\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={this.state.squares}\r\n            onClick={(row, col) => this.handleClick(row, col)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from \"react\";\r\nimport Game from \"./Game\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Game />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}